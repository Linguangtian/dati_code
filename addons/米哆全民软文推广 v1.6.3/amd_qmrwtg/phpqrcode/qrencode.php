<?php
 goto HtnDV; jKW2L: class FrameFiller { public $width; public $frame; public $x; public $y; public $dir; public $bit; public function __construct($width, &$frame) { goto eaZqo; Ev7jU: $this->dir = -1; goto BQVvT; q5lhr: $this->y = $width - 1; goto Ev7jU; BQVvT: $this->bit = -1; goto eX0G3; eaZqo: $this->width = $width; goto KCGSO; KCGSO: $this->frame = $frame; goto quF57; quF57: $this->x = $width - 1; goto q5lhr; eX0G3: } public function setFrameAt($at, $val) { $this->frame[$at["\171"]][$at["\x78"]] = chr($val); } public function getFrameAt($at) { return ord($this->frame[$at["\x79"]][$at["\x78"]]); } public function next() { goto PKms8; utglO: $y = $this->y; goto ywlPa; kRj5s: RXsob: goto ABVQZ; qfpKv: $x -= 2; goto EaRgC; napim: FAIBk: goto hytU1; rdy72: $this->bit++; goto yZof0; Ktu1x: LGRbb: goto pK2ML; Cmzed: $x--; goto BEdI_; QSNw0: if (!($x == 6)) { goto RGsXD; } goto Cmzed; GIEvB: $y = 0; goto MiHTI; pK2ML: goto FAIBk; goto y4UXd; JbAGL: YwzX_: goto kS5xl; ESFDe: $y = $w - 1; goto qfpKv; p3mjb: return array("\x78" => $this->x, "\x79" => $this->y); goto JbAGL; eKMJI: Cs8KE: goto m8g67; myVS0: $this->bit--; goto rg6lY; f7s7V: dn03z: goto N4gT1; ArSng: $this->y = $y; goto i1EnI; ijPlE: OOrnH: goto napim; EaRgC: $this->dir = -1; goto nC1Ps; kS5xl: $x = $this->x; goto utglO; R82fu: $x--; goto wbfbX; nC1Ps: if (!($x == 6)) { goto Q7N00; } goto R82fu; yZof0: Y5wTs: goto NRZ5c; N4gT1: $x--; goto rdy72; iLyHu: $this->dir = 1; goto QSNw0; y4UXd: G0alQ: goto VQ5m7; ywlPa: $w = $this->width; goto y3gsD; wbfbX: $y -= 8; goto J1epY; ohBgk: RGsXD: goto ijPlE; ozTkc: $y += $this->dir; goto myVS0; PKms8: Greq7: goto bOsyE; NRZ5c: if ($this->dir < 0) { goto G0alQ; } goto NZtTX; m8g67: $this->x = $x; goto ArSng; MiHTI: $x -= 2; goto iLyHu; BEdI_: $y = 9; goto ohBgk; bOsyE: if (!($this->bit == -1)) { goto YwzX_; } goto uLwRJ; uLwRJ: $this->bit = 0; goto p3mjb; NZtTX: if (!($y == $w)) { goto LGRbb; } goto ESFDe; rg6lY: goto Y5wTs; goto f7s7V; qM4hw: $x++; goto ozTkc; y3gsD: if ($this->bit == 0) { goto dn03z; } goto qM4hw; ABVQZ: return array("\x78" => $x, "\x79" => $y); goto qMxW2; vrLV1: return null; goto eKMJI; i1EnI: if (ord($this->frame[$y][$x]) & 0x80) { goto Greq7; } goto kRj5s; VQ5m7: if (!($y < 0)) { goto OOrnH; } goto GIEvB; J1epY: Q7N00: goto Ktu1x; hytU1: if (!($x < 0 || $y < 0)) { goto Cs8KE; } goto vrLV1; qMxW2: } } goto a2gIP; WO6WH: class QRrawcode { public $version; public $datacode = array(); public $ecccode = array(); public $blocks; public $rsblocks = array(); public $count; public $dataLength; public $eccLength; public $b1; public function __construct(QRinput $input) { goto l1bNY; fSkMV: $this->b1 = QRspec::rsBlockNum1($spec); goto SkATn; tYCLO: $this->blocks = QRspec::rsBlockNum($spec); goto NkC5l; yaDVW: if (!($ret < 0)) { goto t81mt; } goto h36fE; NkC5l: $ret = $this->init($spec); goto yaDVW; bm0Lj: return null; goto jYbid; jYbid: t81mt: goto rzcyE; l1bNY: $spec = array(0, 0, 0, 0, 0); goto r7uvh; Wqa2T: $this->eccLength = QRspec::rsEccLength($spec); goto Zzxzm; rzcyE: $this->count = 0; goto yJN8Y; KzJmh: QRspec::getEccSpec($input->getVersion(), $input->getErrorCorrectionLevel(), $spec); goto OYqMh; Zzxzm: $this->ecccode = array_fill(0, $this->eccLength, 0); goto tYCLO; o0iZR: if (!is_null($this->datacode)) { goto u6qDN; } goto oPqm3; r7uvh: $this->datacode = $input->getByteStream(); goto o0iZR; yDkhA: u6qDN: goto KzJmh; OYqMh: $this->version = $input->getVersion(); goto fSkMV; h36fE: throw new Exception("\142\154\x6f\x63\153\40\141\x6c\x6c\157\x63\40\x65\x72\162\157\x72"); goto bm0Lj; SkATn: $this->dataLength = QRspec::rsDataLength($spec); goto Wqa2T; oPqm3: throw new Exception("\x6e\x75\x6c\154\40\x69\155\x70\165\164\40\x73\164\162\x69\x6e\147"); goto yDkhA; yJN8Y: } public function init(array $spec) { goto Ci8z5; dxhVe: return 0; goto nu1Dj; TnlYw: PfvoH: goto H8b6i; A3m9W: if (!($i < QRspec::rsBlockNum1($spec))) { goto ucUhe; } goto CfW0C; JRIuv: if (!($rs == NULL)) { goto LNvA0; } goto FT0Kg; zu20D: $rs = QRrs::init_rs(8, 0x11d, 0, 1, $el, 255 - $dl - $el); goto JRIuv; Kqv1m: Z9DN1: goto Eiezx; vJtVb: if (!(QRspec::rsBlockNum2($spec) == 0)) { goto ieZro; } goto AKs3s; NNCuy: $el = QRspec::rsEccCodes2($spec); goto zu20D; ViQvX: $i = 0; goto C49il; CfW0C: $ecc = array_slice($this->ecccode, $eccPos); goto oB7MM; OuZMM: $i = 0; goto Kqv1m; aAA71: $this->ecccode = array_merge(array_slice($this->ecccode, 0, $eccPos), $ecc); goto kvqQk; AKs3s: return 0; goto rX0DZ; wfJgy: $dataPos += $dl; goto NkFu5; qpzkg: $blockNo++; goto YmfRW; u9XG0: $ecc = array_slice($this->ecccode, $eccPos); goto Yr51_; YA53C: $dl = QRspec::rsDataCodes2($spec); goto NNCuy; jPMiD: $blockNo++; goto TnlYw; JlbnN: $dataPos = 0; goto A0_0b; vPD1F: ucUhe: goto vJtVb; Yr51_: $this->rsblocks[$blockNo] = new QRrsblock($dl, array_slice($this->datacode, $dataPos), $el, $ecc, $rs); goto UNp7t; tc2Yx: $i++; goto VPjrJ; UNp7t: $this->ecccode = array_merge(array_slice($this->ecccode, 0, $eccPos), $ecc); goto wfJgy; k9YCW: $rs = QRrs::init_rs(8, 0x11d, 0, 1, $el, 255 - $dl - $el); goto C7U4D; YmfRW: Fkev2: goto tc2Yx; NkFu5: $eccPos += $el; goto jPMiD; A0_0b: $eccPos = 0; goto ViQvX; FT0Kg: return -1; goto jZZtn; C49il: XL93d: goto A3m9W; H8b6i: $i++; goto rpo9f; rX0DZ: ieZro: goto YA53C; Ci8z5: $dl = QRspec::rsDataCodes1($spec); goto nUrOy; C7U4D: $blockNo = 0; goto JlbnN; kvqQk: $dataPos += $dl; goto uxYNd; jZZtn: LNvA0: goto OuZMM; Eiezx: if (!($i < QRspec::rsBlockNum2($spec))) { goto Bojae; } goto u9XG0; rpo9f: goto Z9DN1; goto Q7T8w; oB7MM: $this->rsblocks[$blockNo] = new QRrsblock($dl, array_slice($this->datacode, $dataPos), $el, $ecc, $rs); goto aAA71; nUrOy: $el = QRspec::rsEccCodes1($spec); goto k9YCW; Q7T8w: Bojae: goto dxhVe; VPjrJ: goto XL93d; goto vPD1F; uxYNd: $eccPos += $el; goto qpzkg; nu1Dj: } public function getCode() { goto RV18C; I3xFb: return $ret; goto yQOgO; k6Lhr: $col = $this->count / $this->blocks; goto q4iA8; jDGwM: $ret = $this->rsblocks[$row]->ecc[$col]; goto jgf4P; jgf4P: ueuny: goto LJINC; IySSg: $ret = $this->rsblocks[$row]->data[$col]; goto B_zL2; zTr1Z: $row += $this->b1; goto a19cv; q4iA8: if (!($col >= $this->rsblocks[0]->dataLength)) { goto ToYPi; } goto zTr1Z; pH4aS: if ($this->count < $this->dataLength + $this->eccLength) { goto p8eir; } goto VbKyw; B_zL2: gvO29: goto eoZNd; YhDSE: $row = ($this->count - $this->dataLength) % $this->blocks; goto y6KG4; LJINC: goto gvO29; goto dPryo; miy6t: if ($this->count < $this->dataLength) { goto g_dU3; } goto pH4aS; a19cv: ToYPi: goto IySSg; VbKyw: return 0; goto sa2v5; eoZNd: $this->count++; goto I3xFb; dPryo: g_dU3: goto OzNBy; YmhWu: p8eir: goto YhDSE; sa2v5: goto ueuny; goto YmhWu; RV18C: $ret; goto miy6t; OzNBy: $row = $this->count % $this->blocks; goto k6Lhr; y6KG4: $col = ($this->count - $this->dataLength) / $this->blocks; goto jDGwM; yQOgO: } } goto l4kuA; l4kuA: class QRcode { public $version; public $width; public $data; public function encodeMask(QRinput $input, $mask) { goto DfjtR; vNjQu: ifc37: goto CI8D_; y3QaP: return $this; goto x_s4L; pwHun: if (!($input->getErrorCorrectionLevel() > QR_ECLEVEL_H)) { goto Z87VB; } goto TjiZs; EjZp_: goto mFkiR; goto Fm1TE; CI8D_: $i = 0; goto BKiYv; SXAos: $raw = new QRrawcode($input); goto CA3o3; EAiEm: $version = $raw->version; goto CPeiv; srSNG: goto BcXRT; goto p3iew; CPeiv: $width = QRspec::getWidth($version); goto E8bJF; XByr4: $i = 0; goto Ne4lM; Eh6lN: OLq01: goto TabIm; IM223: $this->version = $version; goto OOa3E; jRNe_: $j++; goto X77qH; E8bJF: $frame = QRspec::newFrame($version); goto sm1B3; dv7uX: goto gOXW3; goto nu34g; pXBuz: $j = 0; goto HkrHv; CA3o3: QRtools::markTime("\x61\146\164\x65\162\137\162\x61\x77"); goto EAiEm; OOa3E: $this->width = $width; goto tk_3i; fCBLo: return NULL; goto SkFOA; OOGxe: if (!($masked == NULL)) { goto d9ney; } goto fCBLo; HkrHv: kGdFl: goto Fdlu7; DfjtR: if (!($input->getVersion() < 0 || $input->getVersion() > QRSPEC_VERSION_MAX)) { goto vBm7g; } goto gNwYO; FssCL: $i++; goto srSNG; p3iew: ks94j: goto LYNzw; sm1B3: $filler = new FrameFiller($width, $frame); goto wY4E9; ivsgG: $code = $raw->getCode(); goto KGt0E; gNwYO: throw new Exception("\167\162\x6f\156\147\40\166\145\162\x73\x69\157\156"); goto FH7cC; oIDht: iJGM0: goto FssCL; y0X08: $filler->setFrameAt($addr, 0x2 | ($bit & $code) != 0); goto H3ejU; FH7cC: vBm7g: goto pwHun; tk_3i: $this->data = $masked; goto y3QaP; nu34g: R5wLa: goto IZHWY; TURBP: Z87VB: goto SXAos; rrHKA: QRtools::markTime("\141\146\164\145\162\x5f\155\x61\x73\x6b"); goto IM223; xfmlF: if (!($i < $j)) { goto ks94j; } goto NyQlm; SkFOA: d9ney: goto rrHKA; jihK8: GMaHO: goto OOGxe; UyqXI: $filler->setFrameAt($addr, 0x2); goto oIDht; zgmiK: bcecS: goto KVCuN; e27qK: $addr = $filler->next(); goto y0X08; Ne4lM: BcXRT: goto xfmlF; Fdlu7: if (!($j < 8)) { goto ja6Ow; } goto e27qK; NyQlm: $addr = $filler->next(); goto UyqXI; KGt0E: $bit = 0x80; goto pXBuz; H3ejU: $bit = $bit >> 1; goto YZOrQ; YZOrQ: qve1u: goto jRNe_; TabIm: if (QR_FIND_BEST_MASK) { goto R5wLa; } goto Hv6PP; Z06ed: unset($filler); goto toPX9; vMV4F: $masked = $maskObj->makeMask($width, $frame, $mask, $input->getErrorCorrectionLevel()); goto xQ45B; PUwKX: unset($raw); goto wXBIx; wY4E9: if (!is_null($filler)) { goto ifc37; } goto tWsRy; BKiYv: mFkiR: goto CsXEA; Fm1TE: RyCw0: goto oVYuF; X77qH: goto kGdFl; goto h0D2O; Hv6PP: $masked = $maskObj->makeMask($width, $frame, intval(QR_DEFAULT_MASK) % 8, $input->getErrorCorrectionLevel()); goto dv7uX; LYNzw: $frame = $filler->frame; goto Z06ed; KVCuN: $i++; goto EjZp_; ppJbM: gOXW3: goto jihK8; h0D2O: ja6Ow: goto zgmiK; tWsRy: return NULL; goto vNjQu; oVYuF: QRtools::markTime("\141\x66\164\x65\162\x5f\146\x69\154\x6c\x65\162"); goto PUwKX; wXBIx: $j = QRspec::getRemainder($version); goto XByr4; TjiZs: throw new Exception("\x77\x72\157\x6e\x67\x20\x6c\x65\166\x65\x6c"); goto TURBP; xQ45B: goto GMaHO; goto Eh6lN; IZHWY: $masked = $maskObj->mask($width, $frame, $input->getErrorCorrectionLevel()); goto ppJbM; CsXEA: if (!($i < $raw->dataLength + $raw->eccLength)) { goto RyCw0; } goto ivsgG; mtAJp: if ($mask < 0) { goto OLq01; } goto vMV4F; toPX9: $maskObj = new QRmask(); goto mtAJp; x_s4L: } public function encodeInput(QRinput $input) { return $this->encodeMask($input, -1); } public function encodeString8bit($string, $version, $level) { goto uk_ua; RKLtA: unset($input); goto ZlxP3; q9Lo8: return NULL; goto HAOBV; OJviH: throw new Exception("\145\x6d\x70\164\171\40\163\164\162\x69\156\x67\x21"); goto NyVwE; HAOBV: xB_3n: goto y_6Ck; NyVwE: return NULL; goto YOQnf; OfUgK: $input = new QRinput($version, $level); goto byNhG; y_6Ck: $ret = $input->append($input, QR_MODE_8, strlen($string), str_split($string)); goto AXPLE; AXPLE: if (!($ret < 0)) { goto HSBJP; } goto RKLtA; YOQnf: deKbj: goto OfUgK; byNhG: if (!($input == NULL)) { goto xB_3n; } goto q9Lo8; pYsvR: return $this->encodeInput($input); goto aGspr; uk_ua: if (!(string == NULL)) { goto deKbj; } goto OJviH; Lf9Hd: HSBJP: goto pYsvR; ZlxP3: return NULL; goto Lf9Hd; aGspr: } public function encodeString($string, $version, $level, $hint, $casesensitive) { goto uuIaz; RCCBh: if (!($ret < 0)) { goto MrzYU; } goto bNVB9; bN7lI: MrzYU: goto rK94o; lrUTF: edod_: goto lNR30; uuIaz: if (!($hint != QR_MODE_8 && $hint != QR_MODE_KANJI)) { goto edod_; } goto I8Wp4; imlh6: return NULL; goto xVBfr; g1Mco: $ret = QRsplit::splitStringToQRinput($string, $input, $hint, $casesensitive); goto RCCBh; U3SM7: return NULL; goto lrUTF; lNR30: $input = new QRinput($version, $level); goto NyYfo; xVBfr: OQn0D: goto g1Mco; bNVB9: return NULL; goto bN7lI; rK94o: return $this->encodeInput($input); goto M70zN; NyYfo: if (!($input == NULL)) { goto OQn0D; } goto imlh6; I8Wp4: throw new Exception("\x62\141\x64\40\x68\x69\156\x74"); goto U3SM7; M70zN: } public static function png($text, $outfile = false, $level = QR_ECLEVEL_L, $size = 3, $margin = 4, $saveandprint = false) { $enc = QRencode::factory($level, $size, $margin); return $enc->encodePNG($text, $outfile, $saveandprint = false); } public static function text($text, $outfile = false, $level = QR_ECLEVEL_L, $size = 3, $margin = 4) { $enc = QRencode::factory($level, $size, $margin); return $enc->encode($text, $outfile); } public static function raw($text, $outfile = false, $level = QR_ECLEVEL_L, $size = 3, $margin = 4) { $enc = QRencode::factory($level, $size, $margin); return $enc->encodeRAW($text, $outfile); } } goto jKW2L; HtnDV: class QRrsblock { public $dataLength; public $data = array(); public $eccLength; public $ecc = array(); public function __construct($dl, $data, $el, &$ecc, QRrsItem $rs) { goto WFRkO; WFRkO: $rs->encode_rs_char($data, $ecc); goto Ri1ii; Ri1ii: $this->dataLength = $dl; goto b0U8t; dH9nT: $this->ecc = $ecc; goto ff1x5; b0U8t: $this->data = $data; goto W1k8B; W1k8B: $this->eccLength = $el; goto dH9nT; ff1x5: } } goto WO6WH; a2gIP: class QRencode { public $casesensitive = true; public $eightbit = false; public $version = 0; public $size = 3; public $margin = 4; public $structured = 0; public $level = QR_ECLEVEL_L; public $hint = QR_MODE_8; public static function factory($level = QR_ECLEVEL_L, $size = 3, $margin = 4) { goto WEGuG; Sn30Q: $enc->size = $size; goto fZ0cN; fZ0cN: $enc->margin = $margin; goto p6nbc; u2mtb: GRUD0: goto n4_Xt; p6nbc: switch ($level . '') { case "\60": case "\61": case "\62": case "\63": $enc->level = $level; goto TObOy; case "\154": case "\x4c": $enc->level = QR_ECLEVEL_L; goto TObOy; case "\x6d": case "\115": $enc->level = QR_ECLEVEL_M; goto TObOy; case "\x71": case "\x51": $enc->level = QR_ECLEVEL_Q; goto TObOy; case "\x68": case "\110": $enc->level = QR_ECLEVEL_H; goto TObOy; } goto u2mtb; n4_Xt: TObOy: goto iewvT; WEGuG: $enc = new QRencode(); goto Sn30Q; iewvT: return $enc; goto yho7L; yho7L: } public function encodeRAW($intext, $outfile = false) { goto xZIrl; YAhx1: lgkId: goto r2861; r2861: return $code->data; goto uEjF5; kw_CQ: $code->encodeString8bit($intext, $this->version, $this->level); goto YAhx1; WvtFC: cl_fw: goto kw_CQ; Fq_3U: $code->encodeString($intext, $this->version, $this->level, $this->hint, $this->casesensitive); goto H7sFF; o20Qq: if ($this->eightbit) { goto cl_fw; } goto Fq_3U; xZIrl: $code = new QRcode(); goto o20Qq; H7sFF: goto lgkId; goto WvtFC; uEjF5: } public function encode($intext, $outfile = false) { goto cMEz5; LOLsi: file_put_contents($outfile, join("\xa", QRtools::binarize($code->data))); goto uBVx2; FUUef: return QRtools::binarize($code->data); goto j8uKq; Hlcby: DwCw9: goto e9V3E; eoTYw: if ($this->eightbit) { goto S_I7w; } goto ASZjA; uBVx2: ldH7B: goto whRvY; j8uKq: goto ldH7B; goto fEf32; rInc2: S_I7w: goto pvugw; JHa2N: if ($outfile !== false) { goto D1_8W; } goto FUUef; fEf32: D1_8W: goto LOLsi; ASZjA: $code->encodeString($intext, $this->version, $this->level, $this->hint, $this->casesensitive); goto ZEPiv; cMEz5: $code = new QRcode(); goto eoTYw; ZEPiv: goto DwCw9; goto rInc2; pvugw: $code->encodeString8bit($intext, $this->version, $this->level); goto Hlcby; e9V3E: QRtools::markTime("\x61\x66\164\x65\x72\x5f\x65\156\x63\157\144\145"); goto JHa2N; whRvY: } public function encodePNG($intext, $outfile = false, $saveandprint = false) { try { goto W0Hs5; dGBGf: QRtools::log($outfile, $err); goto caiPO; r3PrO: ob_end_clean(); goto xwGKD; l6m0c: $err = ob_get_contents(); goto r3PrO; tzfVY: QRimage::png($tab, $outfile, min(max(1, $this->size), $maxSize), $this->margin, $saveandprint); goto g8Hd1; caiPO: bfYA0: goto IM9G5; xwGKD: if (!($err != '')) { goto bfYA0; } goto dGBGf; W0Hs5: ob_start(); goto J2ytK; J2ytK: $tab = $this->encode($intext); goto l6m0c; IM9G5: $maxSize = (int) (QR_PNG_MAXIMUM_SIZE / (count($tab) + 2 * $this->margin)); goto tzfVY; g8Hd1: } catch (Exception $e) { QRtools::log($outfile, $e->getMessage()); } } }