<?php
 goto Vn8HW; MLEks: class QRinputItem { public $mode; public $size; public $data; public $bstream; public function __construct($mode, $size, $data, $bstream = null) { goto MEkIT; j4BtH: if (!(count($setData) < $size)) { goto aKzCn; } goto IJqp2; Uroid: throw new Exception("\105\162\162\157\x72\40\x6d\72" . $mode . "\54\x73\x3a" . $size . "\54\144\x3a" . join("\54", $setData)); goto LLyOz; m3FYf: $this->data = $setData; goto EhwRS; MHqq5: if (QRinput::check($mode, $size, $setData)) { goto p1wAF; } goto Uroid; EhwRS: $this->bstream = $bstream; goto A3Wpy; LLyOz: return null; goto PV27f; PV27f: p1wAF: goto H18JK; W5PvZ: aKzCn: goto MHqq5; WSo2v: $this->size = $size; goto m3FYf; IJqp2: $setData = array_merge($setData, array_fill(0, $size - count($setData), 0)); goto W5PvZ; H18JK: $this->mode = $mode; goto WSo2v; MEkIT: $setData = array_slice($data, 0, $size); goto j4BtH; A3Wpy: } public function encodeModeNum($version) { try { goto XlhuQ; WnYBm: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_NUM, $version), $this->size); goto utFpd; ZLkCP: vWzOP: goto st2gk; tQAez: $val += (ord($this->data[$i * 3 + 1]) - ord("\60")) * 10; goto NFgX8; lVGzx: VMCE5: goto N7FeT; rRP0W: $val = (ord($this->data[$i * 3]) - ord("\60")) * 100; goto tQAez; NFgX8: $val += ord($this->data[$i * 3 + 2]) - ord("\x30"); goto ehjkK; yIVuc: $bs->appendNum(7, $val); goto sAToR; N7FeT: if (!($i < $words)) { goto vWzOP; } goto rRP0W; KmKdu: if (!($this->size - $words * 3 == 2)) { goto gXJPW; } goto MuvMA; rg9Qf: $val += ord($this->data[$words * 3 + 1]) - ord("\60"); goto yIVuc; m5F7_: $bs = new QRbitstream(); goto jBPO1; UOMa6: goto zeeYd; goto vN5qW; st2gk: if ($this->size - $words * 3 == 1) { goto zAVPo; } goto KmKdu; sAToR: gXJPW: goto UOMa6; OJWD2: $val = ord($this->data[$words * 3]) - ord("\60"); goto qKrW2; jBPO1: $val = 0x1; goto mlWzC; o13f9: $i++; goto pI2sY; b54FI: zeeYd: goto seSFn; MuvMA: $val = (ord($this->data[$words * 3]) - ord("\60")) * 10; goto rg9Qf; qKrW2: $bs->appendNum(4, $val); goto b54FI; utFpd: $i = 0; goto lVGzx; ehjkK: $bs->appendNum(10, $val); goto kHg22; seSFn: $this->bstream = $bs; goto bxzbo; pI2sY: goto VMCE5; goto ZLkCP; XlhuQ: $words = (int) ($this->size / 3); goto m5F7_; bxzbo: return 0; goto nQPbz; kHg22: Xkre0: goto o13f9; mlWzC: $bs->appendNum(4, $val); goto WnYBm; vN5qW: zAVPo: goto OJWD2; nQPbz: } catch (Exception $e) { return -1; } } public function encodeModeAn($version) { try { goto iGHrP; KFQbX: YDKC3: goto Kubue; FOZAQ: $bs = new QRbitstream(); goto bUBKu; RKhjX: $val = QRinput::lookAnTable(ord($this->data[$words * 2])); goto ya0II; KmIA7: $this->bstream = $bs; goto aEsVj; fqgr9: goto lselr; goto KFQbX; WjEcj: JLNL4: goto NTP9o; yaMUg: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_AN, $version), $this->size); goto LoWRY; SfTji: $val = (int) QRinput::lookAnTable(ord($this->data[$i * 2])) * 45; goto Pzpvj; bUBKu: $bs->appendNum(4, 0x2); goto yaMUg; wEjjo: lselr: goto ofzbE; LoWRY: $i = 0; goto wEjjo; Kubue: if (!($this->size & 1)) { goto nne1o; } goto RKhjX; Pzpvj: $val += (int) QRinput::lookAnTable(ord($this->data[$i * 2 + 1])); goto w6eNA; w6eNA: $bs->appendNum(11, $val); goto WjEcj; ofzbE: if (!($i < $words)) { goto YDKC3; } goto SfTji; iGHrP: $words = (int) ($this->size / 2); goto FOZAQ; ya0II: $bs->appendNum(6, $val); goto jl49c; aEsVj: return 0; goto oYEdP; jl49c: nne1o: goto KmIA7; NTP9o: $i++; goto fqgr9; oYEdP: } catch (Exception $e) { return -1; } } public function encodeMode8($version) { try { goto aNZTi; O3tjI: $i = 0; goto U2bYV; B1Wup: $bs->appendNum(8, ord($this->data[$i])); goto N5FeV; N5FeV: CEJsd: goto K6EpS; sUXVB: JxzTy: goto wXUMJ; U2bYV: Y5FOP: goto hZT9c; NO6IG: goto Y5FOP; goto sUXVB; aNZTi: $bs = new QRbitstream(); goto tlVJ6; K6EpS: $i++; goto NO6IG; tlVJ6: $bs->appendNum(4, 0x4); goto tZdmQ; C1n1O: return 0; goto zYtlK; hZT9c: if (!($i < $this->size)) { goto JxzTy; } goto B1Wup; wXUMJ: $this->bstream = $bs; goto C1n1O; tZdmQ: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_8, $version), $this->size); goto O3tjI; zYtlK: } catch (Exception $e) { return -1; } } public function encodeModeKanji($version) { try { goto DNv1D; vBwKh: $h = ($val >> 8) * 0xc0; goto XQp2R; u0loG: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_KANJI, $version), (int) ($this->size / 2)); goto VtNnt; I_jP7: $i += 2; goto RE1RU; DNv1D: $bs = new QRbitrtream(); goto eu1SB; CASqw: BcqHt: goto ZRQeC; x1k_n: return 0; goto s747k; XQp2R: $val = ($val & 0xff) + $h; goto uYijq; ZRQeC: $val -= 0x8140; goto s1x4W; aVsoy: $this->bstream = $bs; goto x1k_n; JPvGM: nuNQF: goto lrge3; RE1RU: goto nuNQF; goto lJ1Am; ETD24: goto nctnt; goto CASqw; Ecbnx: $val -= 0xc140; goto ETD24; jlsvn: YIY6b: goto I_jP7; R0QuE: if ($val <= 0x9ffc) { goto BcqHt; } goto Ecbnx; lJ1Am: rKEE6: goto aVsoy; eu1SB: $bs->appendNum(4, 0x8); goto u0loG; VtNnt: $i = 0; goto JPvGM; v35ry: $val = ord($this->data[$i]) << 8 | ord($this->data[$i + 1]); goto R0QuE; uYijq: $bs->appendNum(13, $val); goto jlsvn; lrge3: if (!($i < $this->size)) { goto rKEE6; } goto v35ry; s1x4W: nctnt: goto vBwKh; s747k: } catch (Exception $e) { return -1; } } public function encodeModeStructure() { try { goto Ahqvi; HYOaY: return 0; goto qG7gJ; FfANC: $bs->appendNum(4, 0x3); goto OypcZ; TkcR3: $this->bstream = $bs; goto HYOaY; UwRTO: $bs->appendNum(8, ord($this->data[2])); goto TkcR3; OypcZ: $bs->appendNum(4, ord($this->data[1]) - 1); goto aVqAX; Ahqvi: $bs = new QRbitstream(); goto FfANC; aVqAX: $bs->appendNum(4, ord($this->data[0]) - 1); goto UwRTO; qG7gJ: } catch (Exception $e) { return -1; } } public function estimateBitStreamSizeOfEntry($version) { goto rvtQk; Nr6lT: $m = 1 << $l; goto Tu4l2; oeSIL: $bits += $num * (4 + $l); goto We2o2; opioi: $version = 1; goto ZD6a0; ZD6a0: Mu834: goto RSMdV; VAeru: if (!($version == 0)) { goto Mu834; } goto opioi; g0A9H: FlDeS: goto L2JZD; rvtQk: $bits = 0; goto VAeru; RSMdV: switch ($this->mode) { case QR_MODE_NUM: $bits = QRinput::estimateBitsModeNum($this->size); goto FlDeS; case QR_MODE_AN: $bits = QRinput::estimateBitsModeAn($this->size); goto FlDeS; case QR_MODE_8: $bits = QRinput::estimateBitsMode8($this->size); goto FlDeS; case QR_MODE_KANJI: $bits = QRinput::estimateBitsModeKanji($this->size); goto FlDeS; case QR_MODE_STRUCTURE: return STRUCTURE_HEADER_BITS; default: return 0; } goto F79gM; F79gM: er7UF: goto g0A9H; Tu4l2: $num = (int) (($this->size + $m - 1) / $m); goto oeSIL; We2o2: return $bits; goto TkHAz; L2JZD: $l = QRspec::lengthIndicator($this->mode, $version); goto Nr6lT; TkHAz: } public function encodeBitStream($version) { try { goto sL6zR; sL6zR: unset($this->bstream); goto v5GHd; ad_pO: if (!($ret < 0)) { goto He3iS; } goto yoiqD; opxF2: unset($st1); goto dHXpT; XLmro: if ($this->size > $words) { goto jnB1T; } goto Tqz6l; TDGDA: return $this->bstream->size(); goto RYLrF; Ba4a4: $st2 = new QRinputItem($this->mode, $this->size - $words, array_slice($this->data, $words)); goto TVK7u; TVK7u: $st1->encodeBitStream($version); goto SXX0z; SXX0z: $st2->encodeBitStream($version); goto cvZ9o; dHXpT: unset($st2); goto ZHvx7; xtwml: He3iS: goto Sxb5b; AkxdW: $this->bstream->append($st1->bstream); goto OLDYb; v5GHd: $words = QRspec::maximumWords($this->mode, $version); goto XLmro; WbxRy: FYR3T: goto iyMrF; Tqz6l: $ret = 0; goto Vf8QX; VIua6: jnB1T: goto peEty; Sxb5b: goto Gs4c8; goto VIua6; yoiqD: return -1; goto xtwml; cvZ9o: $this->bstream = new QRbitstream(); goto AkxdW; OLDYb: $this->bstream->append($st2->bstream); goto opxF2; iyMrF: ykhju: goto ad_pO; Vf8QX: switch ($this->mode) { case QR_MODE_NUM: $ret = $this->encodeModeNum($version); goto ykhju; case QR_MODE_AN: $ret = $this->encodeModeAn($version); goto ykhju; case QR_MODE_8: $ret = $this->encodeMode8($version); goto ykhju; case QR_MODE_KANJI: $ret = $this->encodeModeKanji($version); goto ykhju; case QR_MODE_STRUCTURE: $ret = $this->encodeModeStructure(); goto ykhju; default: goto ykhju; } goto WbxRy; peEty: $st1 = new QRinputItem($this->mode, $words, $this->data); goto Ba4a4; ZHvx7: Gs4c8: goto TDGDA; RYLrF: } catch (Exception $e) { return -1; } } } goto GRRCL; Vn8HW: define("\123\124\x52\125\x43\124\x55\122\105\x5f\110\x45\x41\104\x45\122\x5f\102\x49\124\x53", 20); goto wMJ9t; wMJ9t: define("\x4d\x41\x58\x5f\123\x54\122\125\103\124\125\x52\105\x44\137\123\x59\x4d\102\x4f\114\x53", 16); goto MLEks; GRRCL: class QRinput { public $items; private $version; private $level; public function __construct($version = 0, $level = QR_ECLEVEL_L) { goto NCyrY; diBCv: $this->level = $level; goto PAUe3; SnH7H: throw new Exception("\x49\x6e\166\141\154\x69\144\x20\x76\x65\x72\x73\x69\x6f\156\40\x6e\x6f"); goto alvmO; NCyrY: if (!($version < 0 || $version > QRSPEC_VERSION_MAX || $level > QR_ECLEVEL_H)) { goto mf1Sa; } goto SnH7H; wtHjy: $this->version = $version; goto diBCv; YQ7Tt: mf1Sa: goto wtHjy; alvmO: return NULL; goto YQ7Tt; PAUe3: } public function getVersion() { return $this->version; } public function setVersion($version) { goto xDC5b; RRLJT: $this->version = $version; goto nTvCn; xDC5b: if (!($version < 0 || $version > QRSPEC_VERSION_MAX)) { goto QzF33; } goto hSDLF; hSDLF: throw new Exception("\111\156\166\x61\x6c\151\x64\x20\166\x65\x72\x73\151\157\x6e\40\x6e\x6f"); goto j7bKu; j7bKu: return -1; goto X8CoM; nTvCn: return 0; goto uBFH0; X8CoM: QzF33: goto RRLJT; uBFH0: } public function getErrorCorrectionLevel() { return $this->level; } public function setErrorCorrectionLevel($level) { goto N7_Nk; uu2CJ: M9AbH: goto Llm4g; oaWch: return -1; goto uu2CJ; oBOaS: throw new Exception("\x49\156\x76\141\x6c\x69\144\40\105\x43\114\105\126\105\x4c"); goto oaWch; HnNwI: return 0; goto NVxfU; Llm4g: $this->level = $level; goto HnNwI; N7_Nk: if (!($level > QR_ECLEVEL_H)) { goto M9AbH; } goto oBOaS; NVxfU: } public function appendEntry(QRinputItem $entry) { $this->items[] = $entry; } public function append($mode, $size, $data) { try { goto QtFVR; yFekM: return 0; goto o25xZ; QtFVR: $entry = new QRinputItem($mode, $size, $data); goto E5dkd; E5dkd: $this->items[] = $entry; goto yFekM; o25xZ: } catch (Exception $e) { return -1; } } public function insertStructuredAppendHeader($size, $index, $parity) { goto WiPsh; uPsXH: throw new Exception("\151\156\x73\x65\x72\x74\x53\164\162\x75\x63\164\165\162\145\144\101\160\x70\x65\x6e\x64\110\145\141\x64\x65\x72\x20\167\x72\x6f\x6e\x67\40\x69\156\x64\145\170"); goto NjKFZ; O0DHo: try { goto fIrFq; fIrFq: $entry = new QRinputItem(QR_MODE_STRUCTURE, 3, buf); goto cv2dA; cv2dA: array_unshift($this->items, $entry); goto ofOvf; ofOvf: return 0; goto FqOa4; FqOa4: } catch (Exception $e) { return -1; } goto j486i; Tzfw7: mAGph: goto P5ADJ; P5ADJ: if (!($index <= 0 || $index > MAX_STRUCTURED_SYMBOLS)) { goto FQ3R5; } goto uPsXH; Yq7xW: throw new Exception("\151\x6e\x73\145\x72\x74\x53\164\x72\165\x63\x74\165\162\x65\x64\x41\160\160\x65\x6e\144\110\x65\141\x64\145\x72\x20\167\162\157\156\x67\40\x73\151\172\145"); goto Tzfw7; NjKFZ: FQ3R5: goto fCU9Y; fCU9Y: $buf = array($size, $index, $parity); goto O0DHo; WiPsh: if (!($size > MAX_STRUCTURED_SYMBOLS)) { goto mAGph; } goto Yq7xW; j486i: } public function calcParity() { goto Zj4Ko; NkE8O: return $parity; goto ckTGa; SI5m7: foreach ($this->items as $item) { goto mfTa7; ZcEgo: $i = $item->size - 1; goto j4sel; dT3hm: if (!($i >= 0)) { goto JzMJ3; } goto IKn93; j4sel: zJf0T: goto dT3hm; W5ALc: hV6ay: goto vpp8d; T5q_q: goto zJf0T; goto Qu4RG; vpp8d: $i--; goto T5q_q; Uu_Z3: DzgVi: goto Osvkn; mfTa7: if (!($item->mode != QR_MODE_STRUCTURE)) { goto DzgVi; } goto ZcEgo; Qu4RG: JzMJ3: goto Uu_Z3; Osvkn: Juv7k: goto kKwuK; IKn93: $parity ^= $item->data[$i]; goto W5ALc; kKwuK: } goto JlOFP; Zj4Ko: $parity = 0; goto SI5m7; JlOFP: bKWfK: goto NkE8O; ckTGa: } public static function checkModeNum($size, $data) { goto KRFWj; KRFWj: $i = 0; goto OU0OS; OU0OS: SzUqH: goto jPRID; FNX7T: $i++; goto JJVcx; jPRID: if (!($i < $size)) { goto gDFm4; } goto buNOX; iMhcQ: BDgMV: goto IKjBo; X6I0n: return true; goto GDzUa; buNOX: if (!(ord($data[$i]) < ord("\60") || ord($data[$i]) > ord("\x39"))) { goto BDgMV; } goto qsB5H; qsB5H: return false; goto iMhcQ; IKjBo: BYw9L: goto FNX7T; JJVcx: goto SzUqH; goto IhwaD; IhwaD: gDFm4: goto X6I0n; GDzUa: } public static function estimateBitsModeNum($size) { goto uGFi0; ukQEh: return $bits; goto tnV9i; OA8Sb: switch ($size - $w * 3) { case 1: $bits += 4; goto qAEBZ; case 2: $bits += 7; goto qAEBZ; default: goto qAEBZ; } goto HWmQm; uGFi0: $w = (int) $size / 3; goto SZqJt; SZqJt: $bits = $w * 10; goto OA8Sb; FQW0A: qAEBZ: goto ukQEh; HWmQm: KmSXC: goto FQW0A; tnV9i: } public static $anTable = array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1); public static function lookAnTable($c) { return $c > 127 ? -1 : self::$anTable[$c]; } public static function checkModeAn($size, $data) { goto Z8hm7; yjlHH: goto DHPYm; goto KzFo5; KzFo5: revgk: goto WXBnq; H7zL1: DHPYm: goto LpDgX; C8Pze: HrlEb: goto MOb43; MOb43: $i++; goto yjlHH; XXapI: JRYOm: goto C8Pze; LpDgX: if (!($i < $size)) { goto revgk; } goto lo4Km; lo4Km: if (!(self::lookAnTable(ord($data[$i])) == -1)) { goto JRYOm; } goto Z8qXz; Z8qXz: return false; goto XXapI; WXBnq: return true; goto gcrfj; Z8hm7: $i = 0; goto H7zL1; gcrfj: } public static function estimateBitsModeAn($size) { goto Bowy9; i582E: if (!($size & 1)) { goto Jt_to; } goto DVyR3; XZYug: return $bits; goto q12hC; DVyR3: $bits += 6; goto FbAT0; FbAT0: Jt_to: goto XZYug; Bowy9: $w = (int) ($size / 2); goto MEppH; MEppH: $bits = $w * 11; goto i582E; q12hC: } public static function estimateBitsMode8($size) { return $size * 8; } public function estimateBitsModeKanji($size) { return (int) ($size / 2 * 13); } public static function checkModeKanji($size, $data) { goto LrE7T; B3eAH: nmFDS: goto xgFnc; LrE7T: if (!($size & 1)) { goto zCfil; } goto UGF9C; BYqJs: if (!($val < 0x8140 || $val > 0x9ffc && $val < 0xe040 || $val > 0xebbf)) { goto ayZyH; } goto iAhEF; iAhEF: return false; goto uFeXf; CNbYG: goto JJHxb; goto ELJ6Y; xgFnc: $i += 2; goto CNbYG; ELJ6Y: cDNIc: goto sbSev; KTXal: zCfil: goto bqmG0; JUHn7: $val = ord($data[$i]) << 8 | ord($data[$i + 1]); goto BYqJs; sbSev: return true; goto YS0i4; oNzOL: JJHxb: goto PNSWa; PNSWa: if (!($i < $size)) { goto cDNIc; } goto JUHn7; uFeXf: ayZyH: goto B3eAH; bqmG0: $i = 0; goto oNzOL; UGF9C: return false; goto KTXal; YS0i4: } public static function check($mode, $size, $data) { goto cIxKw; jr0iH: return false; goto k0JFl; u2bLc: return false; goto hYBoQ; hYBoQ: kpCWF: goto iMoHg; wQKqf: yDhHC: goto jr0iH; DLwa3: jCaDB: goto wQKqf; iMoHg: switch ($mode) { case QR_MODE_NUM: return self::checkModeNum($size, $data); goto yDhHC; case QR_MODE_AN: return self::checkModeAn($size, $data); goto yDhHC; case QR_MODE_KANJI: return self::checkModeKanji($size, $data); goto yDhHC; case QR_MODE_8: return true; goto yDhHC; case QR_MODE_STRUCTURE: return true; goto yDhHC; default: goto yDhHC; } goto DLwa3; cIxKw: if (!($size <= 0)) { goto kpCWF; } goto u2bLc; k0JFl: } public function estimateBitStreamSize($version) { goto SvEfV; xmSTr: i2Ve5: goto dOexn; dOexn: return $bits; goto Th1SH; jULY_: foreach ($this->items as $item) { $bits += $item->estimateBitStreamSizeOfEntry($version); csg2I: } goto xmSTr; SvEfV: $bits = 0; goto jULY_; Th1SH: } public function estimateVersion() { goto mG5mV; iapmh: N3mhI: goto EjgaG; J8dJ3: $bits = $this->estimateBitStreamSize($prev); goto FjXYd; bEuw5: if (!($version < 0)) { goto lzLox; } goto HSzrE; FjXYd: $version = QRspec::getMinimumVersion((int) (($bits + 7) / 8), $this->level); goto bEuw5; mG5mV: $version = 0; goto ZdcEC; F6BeH: lzLox: goto dEMKY; ZdcEC: $prev = 0; goto iapmh; EjgaG: $prev = $version; goto J8dJ3; HSzrE: return -1; goto F6BeH; dEMKY: if ($version > $prev) { goto N3mhI; } goto Sxm4Q; wh0N8: return $version; goto Aacp8; Sxm4Q: wDP5L: goto wh0N8; Aacp8: } public static function lengthOfCode($mode, $version, $bits) { goto xrI3E; zXBZE: $maxsize = QRspec::maximumWords($mode, $version); goto Dsq7E; b1uU_: if (!($size > $maxsize)) { goto XJNz_; } goto ojJcu; QuTZs: DypUz: goto b1uU_; QAXTP: $size = 0; goto QuTZs; Dsq7E: if (!($size < 0)) { goto DypUz; } goto QAXTP; KT17G: xGgwv: goto He4c0; He4c0: FMy5W: goto zXBZE; ojJcu: $size = $maxsize; goto pKhCT; vnEHx: switch ($mode) { case QR_MODE_NUM: goto PsGYn; PsGYn: $chunks = (int) ($payload / 10); goto KVqm1; Wyovg: sO8gB: goto N5HUh; N5HUh: goto FMy5W; goto X0KWn; SD1B0: if ($remain >= 7) { goto UtP5V; } goto BWwfG; BWwfG: if (!($remain >= 4)) { goto RMSJQ; } goto elviN; KVqm1: $remain = $payload - $chunks * 10; goto dTHmi; dTHmi: $size = $chunks * 3; goto SD1B0; bHFOe: goto sO8gB; goto EftZb; EftZb: UtP5V: goto o9NAq; elviN: $size += 1; goto eLaqL; o9NAq: $size += 2; goto Wyovg; eLaqL: RMSJQ: goto bHFOe; X0KWn: case QR_MODE_AN: goto sv775; OZ4yP: $remain = $payload - $chunks * 11; goto o6rE1; sv775: $chunks = (int) ($payload / 11); goto OZ4yP; o6rE1: $size = $chunks * 2; goto yHNf4; o92VD: goto FMy5W; goto iCov1; jtcva: P4hTG: goto o92VD; xBX6n: $size++; goto jtcva; yHNf4: if (!($remain >= 6)) { goto P4hTG; } goto xBX6n; iCov1: case QR_MODE_8: $size = (int) ($payload / 8); goto FMy5W; case QR_MODE_KANJI: $size = (int) ($payload / 13 * 2); goto FMy5W; case QR_MODE_STRUCTURE: $size = (int) ($payload / 8); goto FMy5W; default: $size = 0; goto FMy5W; } goto KT17G; pKhCT: XJNz_: goto Nq7ZJ; Nq7ZJ: return $size; goto owTFA; xrI3E: $payload = $bits - 4 - QRspec::lengthIndicator($mode, $version); goto vnEHx; owTFA: } public function createBitStream() { goto K3qbh; FvF1f: return $total; goto GUSp3; v5Wtk: foreach ($this->items as $item) { goto ZoIAA; Bkc88: if (!($bits < 0)) { goto SVjO0; } goto hsB8D; l75wX: SVjO0: goto e1_M0; ZoIAA: $bits = $item->encodeBitStream($this->version); goto Bkc88; j37Rf: hfpzZ: goto qj1I0; e1_M0: $total += $bits; goto j37Rf; hsB8D: return -1; goto l75wX; qj1I0: } goto PTWiX; PTWiX: jtvLa: goto FvF1f; K3qbh: $total = 0; goto v5Wtk; GUSp3: } public function convertData() { goto tJNRM; HZ00y: if (!($ver > $this->getVersion())) { goto nGwxk; } goto zX7gC; cpAWI: $this->setVersion($ver); goto hw0e3; fioSA: return 0; goto a7SMe; uGSCb: Fs1OS: goto fioSA; gmQxN: if ($ver < 0) { goto IlnlI; } goto aoz1F; NbRmz: return -1; goto c8jEa; aoz1F: if ($ver > $this->getVersion()) { goto eq8MQ; } goto YHHv1; MKCP6: $bits = $this->createBitStream(); goto GG468; tJNRM: $ver = $this->estimateVersion(); goto HZ00y; dtOnH: eq8MQ: goto cpAWI; wUn_6: IlnlI: goto MUSrC; o3jby: Ht2NS: goto MKCP6; ENW2_: nEMKy: goto HikDj; HikDj: goto Ht2NS; goto uGSCb; a6zPx: return -1; goto dwIEj; BzzgR: goto GVJ8o; goto wUn_6; oQo7r: $ver = QRspec::getMinimumVersion((int) (($bits + 7) / 8), $this->level); goto gmQxN; dwIEj: fLGG9: goto oQo7r; MUSrC: throw new Exception("\x57\x52\x4f\x4e\107\40\126\x45\122\x53\111\x4f\116"); goto NbRmz; c8jEa: GVJ8o: goto ENW2_; VCYyJ: goto Im0uL; goto dtOnH; GG468: if (!($bits < 0)) { goto fLGG9; } goto a6zPx; YHHv1: goto Fs1OS; goto VCYyJ; hw0e3: Im0uL: goto BzzgR; DmgHq: nGwxk: goto o3jby; zX7gC: $this->setVersion($ver); goto DmgHq; a7SMe: } public function appendPaddingBit(&$bstream) { goto xBl8P; if2Np: $ret = $padding->appendBytes($padlen, $padbuf); goto AWNJM; AWNJM: if (!($ret < 0)) { goto sBxR6; } goto rXPq4; EqmSj: $ret = $bstream->append($padding); goto g4e1C; ubdkH: return $ret; goto tDL_v; gvsqg: if (!($i < $padlen)) { goto nTGZx; } goto SimH0; tDL_v: a0JAE: goto cKXeF; nFMlr: $bits += 4; goto staLg; hm1B4: if (!($maxbits == $bits)) { goto vcy8g; } goto xx4_L; J5rP4: $i = 0; goto Wox1_; xBl8P: $bits = $bstream->size(); goto ppiVa; staLg: $words = (int) (($bits + 7) / 8); goto uoN82; atE1L: $padbuf = array(); goto J5rP4; FSOjb: nTGZx: goto if2Np; uW3aD: LH6yk: goto nFMlr; rXPq4: return $ret; goto c_dVg; MsPvT: $maxbits = $maxwords * 8; goto hm1B4; ytS4D: if (!($ret < 0)) { goto a0JAE; } goto ubdkH; CToln: if (!($maxbits - $bits < 5)) { goto LH6yk; } goto wF6GR; cKXeF: $padlen = $maxwords - $words; goto ovu9n; Wox1_: YnYY7: goto gvsqg; i0TvI: DDScQ: goto EqmSj; g4e1C: return $ret; goto CHGZa; WHkKD: $ret = $padding->appendNum($words * 8 - $bits + 4, 0); goto ytS4D; avzlr: vcy8g: goto CToln; SimH0: $padbuf[$i] = $i & 1 ? 0x11 : 0xec; goto UClQR; KnYOI: goto YnYY7; goto FSOjb; xx4_L: return 0; goto avzlr; wF6GR: return $bstream->appendNum($maxbits - $bits, 0); goto uW3aD; ovu9n: if (!($padlen > 0)) { goto DDScQ; } goto atE1L; c_dVg: sBxR6: goto i0TvI; ppiVa: $maxwords = QRspec::getDataLength($this->version, $this->level); goto MsPvT; U8F2f: $i++; goto KnYOI; UClQR: NZylb: goto U8F2f; uoN82: $padding = new QRbitstream(); goto WHkKD; CHGZa: } public function mergeBitStream() { goto PqBVu; VrvVU: $bstream = new QRbitstream(); goto qOHW0; PqBVu: if (!($this->convertData() < 0)) { goto xvZUv; } goto Nqvpi; qOHW0: foreach ($this->items as $item) { goto TrM4J; L4ReG: B02Ic: goto KvhsS; DN2lO: yD_Yg: goto L4ReG; TrM4J: $ret = $bstream->append($item->bstream); goto PKLXr; Y6QLo: return null; goto DN2lO; PKLXr: if (!($ret < 0)) { goto yD_Yg; } goto Y6QLo; KvhsS: } goto BauRc; BauRc: OpIGm: goto n11qc; Nqvpi: return null; goto L3sJL; L3sJL: xvZUv: goto VrvVU; n11qc: return $bstream; goto RURxu; RURxu: } public function getBitStream() { goto hnlkx; XLJ1e: return $bstream; goto L2rvR; c0HBB: $ret = $this->appendPaddingBit($bstream); goto S1Icl; l5MUK: return null; goto rTtDw; rTtDw: Dxlfy: goto c0HBB; kRiO5: neQwW: goto XLJ1e; Djj9g: return null; goto kRiO5; S1Icl: if (!($ret < 0)) { goto neQwW; } goto Djj9g; hnlkx: $bstream = $this->mergeBitStream(); goto w0lu1; w0lu1: if (!($bstream == null)) { goto Dxlfy; } goto l5MUK; L2rvR: } public function getByteStream() { goto B9nNE; B9nNE: $bstream = $this->getBitStream(); goto AC46z; EMjI1: JowoG: goto y_WMN; AC46z: if (!($bstream == null)) { goto JowoG; } goto QMpnO; y_WMN: return $bstream->toByte(); goto yCygU; QMpnO: return null; goto EMjI1; yCygU: } }